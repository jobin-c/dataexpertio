SELECT * FROM public.player_seasons order by player_name

drop table players

create type scoring_class as enum('star','good','bad','average')

create type SEASON_STATS as (
				Season INTEGER,
				gp INTEGER,
				pts REAL,
				reb REAL,
				ast REAL
				)
CREATE TABLE PLAYERS (
		player_name TEXT,
		height TEXT,
		collage TEXT,
		country TEXT,
		draft_Year TEXT,
		draft_round TEXT,
		draft_number TEXT,
		scoring_class scoring_class,
		years_since_last_season INTEGER,
		season_stats season_stats[],
		current_season INTEGER,
		PRIMARY KEY(player_name,current_season)
		
)
select * from players where current_season = 2000 and player_name = 'Michael Jordan'

select player_name,
((season_stats[cardinality(season_stats)]::season_stats).pts/
(CASE WHEN season_stats[1].pts=0 THEN 1 else season_stats[1].pts end)) as progress
from players where  current_season = 2001 and scoring_class = 'star'

select * from player_seasons where  player_name = 'Michael Jordan'

with unnested as(
select player_name,UNNEST(season_stats) as season_stats from players where current_season = 2001 
)
select player_name,(season_stats::season_stats).* from unnested


insert into players
WITH yesterday as (
select * from players where current_season = 2000),
today as (
select * from player_seasons where season = 2001
)
select 
COALESCE(t.player_name,y.player_name) as player_name,
COALESCE(t.height,y.height) as height,
COALESCE(t.college,y.collage) as college,
COALESCE(t.country,y.country) as country,
COALESCE(t.draft_year,y.draft_year) as draft_year,
COALESCE(t.draft_round,y.draft_round) as draft_round,
COALESCE(t.draft_number,y.draft_number) as draft_number,
CASE when t.season is not null 
	THEN CASE 	when t.pts > 20 THEN 'star'
	 			when t.pts > 15 THEN 'good'
	 			when t.pts > 10 THEN 'average'
				else 'bad'
		END::scoring_class
else
y.scoring_class
END as scoring_class,
CASE when t.season is not null then 0 
else y.years_since_last_season+1
END as years_since_last_season,
CASE when y.season_stats is null
THEN ARRAY[ROW(t.season,t.gp,t.pts,t.reb,t.ast)::season_stats]
WHEN t.season is not null 
THEN y.season_stats || ARRAY[ROW(t.season,t.gp,t.pts,t.reb,t.ast)::season_stats]
ELSE y.season_stats
END as season_stats,
COALESCE(t.season,y.current_season+1) as current_season
from today t full outer join yesterday y 
on t.player_name = y.player_name

